"use strict";
var Promise = require("bluebird");
var lsdisks = require("ls-disks");
var child_process = require("child_process");
function checkpart(part) {
    var disks = lsdisks.all();
    var thepartition;
    var exists = false;
    for (var d = 0; d < disks.length; d++) {
        for (var p = 0; p < disks[d].partitions.length; p++) {
            if (disks[d].partitions[p].name === part || disks[d].partitions[p].partition === part || disks[d].partitions[p].label === part) {
                thepartition = disks[d].partitions[p];
                exists = true;
            }
        }
    }
    if (exists) {
        return thepartition;
    }
    else {
        throw Error("partition " + part + " not founded");
    }
}
function mount(part, dir) {
    return new Promise(function (resolve, reject) {
        var parti;
        try {
            parti = checkpart(part);
        }
        catch (err) {
            reject(err);
        }
        child_process.exec("mount " + parti.partition + " " + dir, function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else {
                resolve(true);
            }
        });
    });
}
exports.mount = mount;
function umount(dirOrPart) {
    return new Promise(function (resolve, reject) {
        child_process.exec("cat /etc/mtab | grep -c '" + dirOrPart + "'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (parseInt(stdout) > 0) {
                child_process.exec("ummount " + dirOrPart, function (err, stdout, stderr) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(true);
                    }
                });
            }
            else {
                reject("not mounted");
            }
        });
    });
}
exports.umount = umount;
function remount(part, mode, otheroptions) {
    return new Promise(function (resolve, reject) {
        var parti;
        try {
            parti = checkpart(part);
        }
        catch (err) {
            reject(err);
        }
        var cmd = "mount " + parti.partition + " -o remount," + mode;
        if (otheroptions) {
            cmd + ',' + otheroptions;
        }
        child_process.exec("cat /etc/mtab | grep -c '" + part + "'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (parseInt(stdout) > 0) {
                child_process.exec(cmd, function (err, stdout, stderr) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(true);
                    }
                });
            }
            else {
                reject("not mounted");
            }
        });
    });
}
exports.remount = remount;

//# sourceMappingURL=data:application/json;base64,
