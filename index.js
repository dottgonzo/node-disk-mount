"use strict";
var Promise = require("bluebird");
var lsdisks = require("ls-disks");
var child_process = require("child_process");
function checkpart(part) {
    var partitions = lsdisks.all();
    var thepartition;
    var exists = false;
    for (var p = 0; p < partitions.length; p++) {
        if (partition[p].name === part || partition[p].partition === part || partition[p].label === part) {
            thepartition = partition[p];
            exists = true;
        }
    }
    if (exists) {
        return thepartition;
    }
    else {
        throw Error("partition " + part + " not founded");
    }
}
function mount(part, dir) {
    return new Promise(function (resolve, reject) {
        var parti;
        try {
            parti = checkpart(part);
        }
        catch (err) {
            reject(err);
        }
        if (checkpart(part)) {
            child_process.exec("mount " + parti.partition + " " + dir, function (err, stdout, stderr) {
                if (err) {
                    reject(err);
                }
                else {
                    resolve(true);
                }
            });
        }
        else {
            reject("not present");
        }
    });
}
exports.mount = mount;
function umount(dir) {
    return new Promise(function (resolve, reject) {
        child_process.exec("cat /etc/mtab | grep -c '" + dir + "'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (parseInt(stdout) > 0) {
                child_process.exec("ummount " + dir, function (err, stdout, stderr) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(true);
                    }
                });
            }
            else {
                reject("not mounted");
            }
        });
    });
}
exports.umount = umount;
function remount(part, mode, otheroptions) {
    return new Promise(function (resolve, reject) {
        var parti;
        try {
            parti = checkpart(part);
        }
        catch (err) {
            reject(err);
        }
        var cmd = "mount " + parti.partition + " -o remount," + mode;
        if (otheroptions) {
            cmd + ',' + otheroptions;
        }
        child_process.exec("cat /etc/mtab | grep -c '" + part + "'", function (err, stdout, stderr) {
            if (err) {
                reject(err);
            }
            else if (parseInt(stdout) > 0) {
                child_process.exec(cmd, function (err, stdout, stderr) {
                    if (err) {
                        reject(err);
                    }
                    else {
                        resolve(true);
                    }
                });
            }
            else {
                reject("not mounted");
            }
        });
    });
}
exports.remount = remount;
var partition = (function () {
    function partition(part) {
        var shortpart;
        var extpart;
        var disks = lsdisks.all();
        if (part.split('/').length > 1) {
            extpart = part;
            shortpart = part.split('/')[part.split('/').length - 1];
        }
        else {
        }
    }
    return partition;
}());
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = partition;

//# sourceMappingURL=data:application/json;base64,
